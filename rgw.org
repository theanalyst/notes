#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/2.5.0/
#+REVEAL_TRANS: none
#+OPTIONS: reveal_progress

* Librados & Clients


* Architecture
#+CAPTION: Basic rgw/rados interaction
#+header: :exports results
#+BEGIN_SRC ditaa :file images/rgw-top-level.png :cmdline -r

            +------------------------+ +------------------------+
            |   S3 compatible API    | |  Swift compatible API  |
            +------------------------+-+------------------------+
            |                      radosgw                      |
            +---------------------------------------------------+
            |                      librados                     |
            +------------------------+-+------------------------+
            |          OSDs          | |        Monitors        |
            +------------------------+ +------------------------+   


#+END_SRC

#+RESULTS:
[[file:images/rgw-top-level.png]]

Another client for RADOS
- Written in C++
- FCGI module providing S3 & Swift compatible API
- Both S3 & Swift objects live in common namespace
- Other backends instead of fcgi also possible (civetweb,loadgen)
- Rest Call -> libRados
- Objects stored into logical containers/buckets

** Objects
- S3 or Swift objects may map to more than one striped Rados object
- RGW Object has 2 parts - an object logical head (olh) & an optional tail
- olh has a max size of 512K, tail split into chunks of stripe_width (4M:default)
- Technically you can join all the rados object to get back the object again
- Lets do a small experiment to find out

#+REVEAL: split

#+begin_src sh
[r@ra:~]$ cat /dev/urandom | strings --bytes 1 | tr -d '\n\t ' | head --bytes 8192K > random.txt
[r@ra:~]$ ls -lh random.txt
-+rw-rw-r-- 1 r r 8.0M Sep 17 18:08 random.txt
r@ra:~/ceph/src](⎇ master)$ 
sha1sum random.txt 
61ea6dd7ff4a2de1e9ed12a43d60c2bbfa59b038  random.txt
[r@ra:~/ceph/src](⎇ master)$ s3 -us put my-first-bucket/random filename=random.txt
8372224 bytes remaining (0% complete) ...
294912 bytes remaining (96% complete) ...
...
#+end_src

- Object has the object manifest which gives info about the tail
- 
** Buckets/ Containers
- How is it stored?
- unique bucket name
- FYI: Buckets in RGW & CRUSH Maps are totally different 

** Users

* Geo Replication

** Rados replication
- Synchronous writes & Strong Consistency model of ceph

#+header: :exports results
#+BEGIN_SRC ditaa :file images/ceph-writes.png :cmdline -r
             +----------+
             |  Client  |
             |          |
             +----------+
                 *  ^
      Write (1)  |  |  Ack (6)
                 |  |
                 v  *
            +-------------+
            | Primary OSD |
            |             |
            +-------------+
              *  ^   ^  *
    Write (2) |  |   |  |  Write (3)
       +------+  |   |  +------+
       |  +------+   +------+  |
       |  | Ack (4)  Ack (5)|  | 
       v  *                 *  v
 +---------------+   +---------------+
 | Secondary OSD |   | Tertiary OSD  |
 |               |   |               |
 +---------------+   +---------------+

#+END_SRC

#+RESULTS:
[[file:images/ceph-writes.png]]

- Great for single DC deployments & nearby DCs etc.
- Long distances => high write latency


** Zones
   
** Region

* Misc
** Caching
** GC
---------
*** Dump
--------
g_ceph_context 

** Standard Deployment Architecture
